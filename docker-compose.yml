version: '3.8'

# Define reusable environment variables
x-common-env: &common_env
  DJANGO_ENV: ${DJANGO_ENV:-development}
  DJANGO_SETTINGS_MODULE: app.settings.${DJANGO_ENV:-development}
  DJANGO_DEBUG: 1
  SECRET_KEY: dev-secret-key
  DB_HOST: db
  DB_PORT: 5432
  DB_NAME: speech2text
  DB_USER: postgres
  DB_PASSWORD: postgres
  DATABASE_URL: postgresql://postgres:postgres@db:5432/speech2text
  REDIS_URL: redis://redis:6379/0
  CELERY_BROKER_URL: redis://redis:6379/1
  CELERY_RESULT_BACKEND: redis://redis:6379/1
  ALLOWED_HOSTS: localhost,127.0.0.1,web
  CORS_ALLOWED_ORIGINS: http://localhost:8000,http://127.0.0.1:8000,http://web:8000
  CSRF_TRUSTED_ORIGINS: http://localhost,http://127.0.0.1,http://web
  PYTHONFAULTHANDLER: 1
  PYTHONHASHSEED: random
  PYTHONPATH: /app
  
# Healthcheck configuration
x-healthcheck: &healthcheck
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
    interval: 30s
    timeout: 10s
    retries: 3
    start_period: 20s

services:
  # Django application with Gunicorn
  web:
    build:
      context: .
      target: development
    container_name: web
    command: >
      sh -c "python manage.py wait_for_db && 
             python manage.py migrate && 
             python manage.py migrate django_celery_beat &&
             python manage.py collectstatic --noinput &&
             gunicorn --bind 0.0.0.0:8000 --workers 3 --worker-class gthread --threads 4 --access-logfile - --error-logfile - --log-level info app.wsgi:application"
    volumes:
      - ./app:/app
      - media_volume:/app/media
      - static_volume:/app/staticfiles
    environment:
      <<: *common_env
      DJANGO_SETTINGS_MODULE: app.settings.development
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network

  # PostgreSQL database
  db:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-speech2text}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis for Celery
  redis:
    image: redis:7-alpine
    container_name: redis
    command: redis-server --appendonly yes --save "" --save "900 1" --save "300 10" --save "60 10000"
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Celery worker
  celery_worker:
    build:
      context: .
      target: development
    container_name: celery_worker
    command: >
      sh -c "python manage.py wait_for_db && 
             python manage.py migrate && 
             python manage.py migrate django_celery_beat &&
             celery -A app worker --loglevel=info"
    volumes:
      - ./app:/app
      - ./media_volume:/app/media
      - ./static_volume:/app/staticfiles
    environment:
      <<: *common_env
      CELERY_WORKER_CONCURRENCY: 2
      CELERY_WORKER_PREFETCH_MULTIPLIER: 1
      CELERY_WORKER_MAX_TASKS_PER_CHILD: 100
      CELERY_WORKER_MAX_MEMORY_PER_CHILD: 262144  # 256MB
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network

  # Celery beat
  celery_beat:
    build:
      context: .
      target: development
    container_name: celery_beat
    command: >
      sh -c "python manage.py wait_for_db && 
             python manage.py migrate && 
             python manage.py migrate django_celery_beat &&
             python manage.py loaddata initial_data &&
             celery -A app beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler"
    volumes:
      - ./app:/app
      - ./media_volume:/app/media
      - ./static_volume:/app/staticfiles
    environment:
      <<: *common_env
      CELERY_WORKER_CONCURRENCY: 2
      CELERY_WORKER_PREFETCH_MULTIPLIER: 1
      CELERY_WORKER_MAX_TASKS_PER_CHILD: 100
      CELERY_WORKER_MAX_MEMORY_PER_CHILD: 262144  # 256MB
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network

  # Nginx reverse proxy (HTTP only)
  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/app/staticfiles:ro
      - media_volume:/app/media:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - web
    networks:
      - app-network

# Named volumes for persistent data
volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
  nginx_logs:

# Network configuration
networks:
  app-network:
    driver: bridge
