# Docker Compose file for Speech to Text application
# Use 'docker-compose --profile development up' for development
# Use 'docker-compose --profile production up' for production

# Define reusable environment variables
x-django-env: &django-env
  # Core Django
  DJANGO_SETTINGS_MODULE: ${DJANGO_SETTINGS_MODULE:-app.settings.local}
  PYTHONUNBUFFERED: 1
  PYTHONPATH: /app:/app/app
  
  # Database
  DB_NAME: ${DB_NAME:-speech2text}
  DB_USER: ${DB_USER:-postgres}
  DB_PASSWORD: ${DB_PASSWORD:-postgres}
  DB_HOST: db
  DB_PORT: 5432
  
  # Redis
  REDIS_PASSWORD: ${REDIS_PASSWORD:-redispass}
  REDIS_URL: redis://:${REDIS_PASSWORD:-redispass}@redis:6379/0
  
  # Celery
  CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-redispass}@redis:6379/1
  CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-redispass}@redis:6379/1
  CELERY_WORKER_CONCURRENCY: 4
  CELERY_WORKER_MAX_TASKS_PER_CHILD: 1000
  CELERY_WORKER_PREFETCH_MULTIPLIER: 1
  
  # Security
  DEBUG: ${DEBUG:-False}
  SECRET_KEY: ${SECRET_KEY:-django-insecure-change-this-in-production}
  ALLOWED_HOSTS: ${ALLOWED_HOSTS:-localhost,127.0.0.1}
  CSRF_TRUSTED_ORIGINS: ${CSRF_TRUSTED_ORIGINS:-http://localhost,http://127.0.0.1}
  
  # Email
  EMAIL_BACKEND: ${EMAIL_BACKEND:-django.core.mail.backends.console.EmailBackend}
  DEFAULT_FROM_EMAIL: ${DEFAULT_FROM_EMAIL:-noreply@example.com}
  
  # Development specific (can be overridden in .env)
  PYTHONFAULTHANDLER: ${PYTHONFAULTHANDLER:-0}
  C_FORCE_ROOT: ${C_FORCE_ROOT:-1}
  
  # Google OAuth2
  GOOGLE_OAUTH2_CLIENT_ID: ${GOOGLE_OAUTH2_CLIENT_ID:-}
  GOOGLE_OAUTH2_SECRET: ${GOOGLE_OAUTH2_SECRET:-}
  
  # Site URL (for OAuth callbacks)
  SITE_URL: ${SITE_URL:-http://localhost:8000}

services:
  # Nginx reverse proxy (production only)
  nginx:
    image: nginx:1.25-alpine
    container_name: nginx
    restart: unless-stopped
    profiles: ["production"]
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/app/staticfiles:ro
      - media_volume:/app/media:ro
    depends_on:
      web:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health/"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - app-network

  # PostgreSQL database
  db:
    image: postgres:15-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-speech2text}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: --data-checksums
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ${DB_NAME:-speech2text}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - app-network
    command: >
      postgres
      -c shared_buffers=256MB
      -c max_connections=200
      -c work_mem=8MB
      -c maintenance_work_mem=64MB
      -c random_page_cost=1.1
      -c effective_cache_size=768MB

  # Redis for Celery and caching
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: always
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-redispass}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 60 1
      --appendonly yes
      --appendfsync everysec
      --loglevel notice
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redispass}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    networks:
      - app-network

  # Django application - Development
  web_dev:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: django_dev
    profiles: ["development"]
    restart: unless-stopped
    working_dir: /app/app
    command: >
      /bin/sh -c "python manage.py migrate &&
                 python manage.py collectstatic --noinput &&
                 python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/app
      - /app/venv/
      - /app/app/staticfiles/
      - media_volume:/app/app/media
    ports:
      - "8000:8000"
    environment:
      <<: *django-env
      DEBUG: "True"
      DJANGO_SETTINGS_MODULE: app.settings.local
    depends_on:
      - db
      - redis
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Celery worker for background tasks - Development
  celery_worker_dev:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celery_worker_dev
    profiles: ["development"]
    restart: unless-stopped
    working_dir: /app
    command: >
      celery -A app.celery worker
      --loglevel=info
      --concurrency=1
      --pool=solo
      --without-gossip
      --without-mingle
      --without-heartbeat
      --max-tasks-per-child=10
    volumes:
      - .:/app
      - /app/venv/
      - /app/app/staticfiles/
      - media_volume:/app/app/media
      - whisper-cache:/tmp/whisper-cache
    environment:
      <<: *django-env
      C_FORCE_ROOT: "true"
      WHISPER_CACHE_DIR: /tmp/whisper-cache
      PYTHONPATH: /app:/app/app
      # Limit the number of concurrent tasks to 1 to reduce memory usage
      CELERYD_CONCURRENCY: 1
      # Don't prefetch too many tasks
      CELERYD_PREFETCH_MULTIPLIER: 1
      # Limit the number of tasks a worker can execute before being replaced
      CELERYD_MAX_TASKS_PER_CHILD: 10
      # Time to wait before killing a task that's taking too long (1 hour)
      CELERYD_TASK_SOFT_TIME_LIMIT: 3600
      CELERYD_TASK_TIME_LIMIT: 3600
    depends_on:
      - redis
      - db
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "celery", "inspect", "ping", "-d", "celery@$$HOSTNAME"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Celery beat for scheduled tasks - Development
  celery_beat_dev:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celery_beat_dev
    profiles: ["development"]
    restart: unless-stopped
    working_dir: /app/app
    command: >
      celery -A app.celery beat
      --loglevel=info
      --scheduler=django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - .:/app
      - /app/venv/
      - /app/app/staticfiles/
      - media_volume:/app/app/media
      - whisper-cache:/tmp/whisper-cache
    environment:
      <<: *django-env
      C_FORCE_ROOT: "true"
      WHISPER_CACHE_DIR: /tmp/whisper-cache
      PYTHONPATH: /app:/app/app
    depends_on:
      - redis
      - db
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

# Named volumes for persistent data
volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
  whisper-cache:

# Networks
networks:
  app-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
